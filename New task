import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

const Dashboard = () => {
  const [tasks, setTasks] = useState([]);
  const [stats, setStats] = useState({
    totalTasks: 0,
    openTasks: 0,
    closedTasks: 0,
    inProgressTasks: 0,
  });
  const [message, setMessage] = useState('');
  const navigate = useNavigate();

  // Retrieve username and password from localStorage after login
  const username = localStorage.getItem('username');
  const password = localStorage.getItem('password');

  useEffect(() => {
    // Redirect to login page if no username or password is stored
    if (!username || !password) {
      navigate('/');
      return;
    }

    // Fetch tasks from the API using Basic Authentication
    axios
      .get('http://127.0.0.1:8000/api/tasks/', {
        headers: {
          Authorization: `Basic ${btoa(`${username}:${password}`)}`, // Basic Auth header
        },
      })
      .then((response) => {
        setTasks(response.data);
        calculateStats(response.data);
      })
      .catch((error) => {
        console.error('Error fetching tasks:', error);
        setMessage('Failed to load tasks.');
      });
  }, [username, password, navigate]);

  const calculateStats = (tasks) => {
    const total = tasks.length;
    const open = tasks.filter((task) => task.status === 'open').length;
    const inProgress = tasks.filter((task) => task.status === 'in_progress').length;
    const closed = tasks.filter((task) => task.status === 'closed').length;

    setStats({
      totalTasks: total,
      openTasks: open,
      closedTasks: closed,
      inProgressTasks: inProgress,
    });
  };

  // Function to pick a task and update its status
  const pickTask = (taskId) => {
    // Make an API call to update the task status (e.g., picking a task)
    axios
      .put(
        `http://127.0.0.1:8000/api/tasks/${taskId}/`,
        { status: 'in_progress' }, // Update the task status
        {
          headers: {
            Authorization: `Basic ${btoa(`${username}:${password}`)}`, // Basic Auth header
          },
        }
      )
      .then((response) => {
        setMessage('Task picked successfully!');
        setTasks(
          tasks.map((task) =>
            task.id === taskId ? { ...task, status: 'in_progress' } : task
          )
        );
      })
      .catch((error) => {
        console.error('Error picking task:', error);
        setMessage('Failed to pick task.');
      });
  };

  return (
    <div style={{ padding: '20px' }}>
      <h1>Dashboard</h1>

      {message && <p>{message}</p>}

      <h3>Task Statistics:</h3>
      <ul>
        <li>Total Tasks: {stats.totalTasks}</li>
        <li>Open Tasks: {stats.openTasks}</li>
        <li>In Progress Tasks: {stats.inProgressTasks}</li>
        <li>Closed Tasks: {stats.closedTasks}</li>
      </ul>

      <h3>Assigned Tasks:</h3>
      <ul>
        {tasks.map((task) => (
          <li key={task.id}>
            <strong>{task.title}</strong> - {task.status}
            {task.status === 'open' && (
              <button onClick={() => pickTask(task.id)}>Pick Task</button>
            )}
          </li>
        ))}
      </ul>
    </div>
  );
};

export default Dashboard;

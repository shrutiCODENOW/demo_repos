from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from django.contrib.auth.models import User
from .models import Employee, Department
from .serializers import EmployeeSerializer
from rest_framework import status

@api_view(['POST'])
@permission_classes([IsAuthenticated])  # Only authenticated users
def add_employee(request):
    # Check if the user is an admin
    if not request.user.is_staff:
        return Response({"detail": "Permission Denied. Only admins can add employees."}, status=status.HTTP_403_FORBIDDEN)

    # Get data from the request
    username = request.data.get('username')
    password = request.data.get('password')
    first_name = request.data.get('first_name')
    last_name = request.data.get('last_name')
    email = request.data.get('email')
    phone = request.data.get('phone')
    department_name = request.data.get('department')  # Department name as a string
    hire_date = request.data.get('hire_date')

    # Check if all required fields are provided
    missing_fields = [field for field in ['username', 'password', 'first_name', 'last_name', 'email', 'phone', 'department', 'hire_date']
                      if not request.data.get(field)]
    if missing_fields:
        return Response({"detail": f"Missing fields: {', '.join(missing_fields)}"}, status=status.HTTP_400_BAD_REQUEST)

    try:
        # Fetch or create the Department instance
        department, created = Department.objects.get_or_create(name=department_name)

        # Create the User instance
        user = User.objects.create_user(username=username, password=password)

        # Create the Employee instance
        employee = Employee.objects.create(
            first_name=first_name,
            last_name=last_name,
            email=email,
            phone=phone,
            department=department,  # Link the Department instance
            hire_date=hire_date
        )

        # Serialize the Employee object and return the response
        serializer = EmployeeSerializer(employee)
        return Response({"detail": "Employee created successfully.", "employee": serializer.data}, status=status.HTTP_201_CREATED)

    except Exception as e:
        # Handle errors during the creation process
        return Response({"detail": f"Error creating employee: {str(e)}"}, status=status.HTTP_400_BAD_REQUEST)

@api_view(['GET'])
@permission_classes([IsAuthenticated])  # Only authenticated users
def personal_detail(request):
    if request.user.is_staff:
        return Response({"detail": "Permission Denied. Admins cannot access employee details."}, status=403)

    try:
        # Fetch the employee details based on the logged-in user
        employee = Employee.objects.get(first_name=request.user.username)
        # employee = Employee.objects.get(id=request.user.id)
        serializer = EmployeeSerializer(employee)
        return Response({"employee": serializer.data}, status=200)
    except Employee.DoesNotExist:
        return Response({"detail": "Employee record not found."}, status=404)





import React, { useState } from "react";
import { useDispatch } from "react-redux";
import { useNavigate } from "react-router";
import axios from "axios";
import { Box, TextField, Button, Typography } from '@mui/material';
import { loginSuccess } from "../Redux/authSlice";

const Login = () => {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const dispatch = useDispatch();
  const navigate = useNavigate();

  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post("http://127.0.0.1:8000/api/token/", {
        username,
        password,
      });
      const { access, refresh, user_id, is_staff } = response.data;
      dispatch(
        loginSuccess({
          user: { id: user_id, username },
          accessToken: access,
          refreshToken: refresh,
          is_staff: is_staff,
        })
        );
      console.log('Token set');
      if (is_staff) {
        navigate("/admin");
        console.log('Admin');
      }

      setError("");
      navigate("/");
    } catch (error) {
      console.error("Login error:", error);
      setError("Invalid credentials");
    }
  };

  return (
    <Box component="form" onSubmit={handleLogin} sx={{ mt: 2 }}>
      <Typography variant="h4" component="h1" gutterBottom>
        Login
      </Typography>
      <TextField
        margin="normal"
        required
        fullWidth
        id="username"
        label="Username"
        name="username"
        autoComplete="username"
        autoFocus
        value={username}
        onChange={(e) => setUsername(e.target.value)}
      />
      <TextField
        margin="normal"
        required
        fullWidth
        name="password"
        label="Password"
        type="password"
        id="password"
        autoComplete="current-password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
      />
      {error && (
        <Typography color="error" variant="body2">
          {error}
        </Typography>
      )}
      <Button type="submit" fullWidth variant="contained" sx={{ mt: 3, mb: 2 }}>
        Login
      </Button>
    </Box>
  );
};

export default Login;



import React, { useState } from "react";
import { useDispatch } from "react-redux";
import { useNavigate } from "react-router";
import axios from "axios";
import { Box, TextField, Button, Typography, Paper } from "@mui/material";
import { loginSuccess } from "../Redux/authSlice";

const Login = () => {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const dispatch = useDispatch();
  const navigate = useNavigate();

  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post("http://127.0.0.1:8000/api/token/", {
        username,
        password,
      });
      const { access, refresh, user_id, is_staff } = response.data;
      dispatch(
        loginSuccess({
          user: { id: user_id, username },
          accessToken: access,
          refreshToken: refresh,
          is_staff: is_staff,
        })
      );
      setError("");
      if (is_staff) {
        navigate("/admin");
      } else {
        navigate("/");
      }
    } catch (error) {
      console.error("Login error:", error);
      setError("Invalid credentials");
    }
  };

  return (
    <Box
      sx={{
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        height: "100vh",
        backgroundColor: "#f5f5f5",
      }}
    >
      <Paper
        elevation={10}
        sx={{
          padding: 4,
          width: 400,
          textAlign: "center",
          borderRadius: 3,
          boxShadow: "0px 4px 20px rgba(0, 0, 0, 0.2)",
        }}
      >
        <Typography variant="h4" component="h1" gutterBottom color="primary">
          Login
        </Typography>
        <Box component="form" onSubmit={handleLogin}>
          <TextField
            margin="normal"
            required
            fullWidth
            id="username"
            label="Username"
            name="username"
            autoComplete="username"
            autoFocus
            value={username}
            onChange={(e) => setUsername(e.target.value)}
          />
          <TextField
            margin="normal"
            required
            fullWidth
            name="password"
            label="Password"
            type="password"
            id="password"
            autoComplete="current-password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
          />
          {error && (
            <Typography color="error" variant="body2" sx={{ mt: 1 }}>
              {error}
            </Typography>
          )}
          <Button
            type="submit"
            fullWidth
            variant="contained"
            color="primary"
            sx={{ mt: 3, mb: 2 }}
          >
            Login
          </Button>
        </Box>
      </Paper>
    </Box>
  );
};

export default Login;

import React, { useState } from "react";
import { useDispatch } from "react-redux";
import { useNavigate } from "react-router";
import axios from "axios";
import { Box, TextField, Button, Typography, Paper, InputAdornment } from "@mui/material";
import { FaUser, FaLock } from "react-icons/fa"; // Import icons
import { loginSuccess } from "../Redux/authSlice";

const Login = () => {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const dispatch = useDispatch();
  const navigate = useNavigate();

  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post("http://127.0.0.1:8000/api/token/", {
        username,
        password,
      });
      const { access, refresh, user_id, is_staff } = response.data;
      dispatch(
        loginSuccess({
          user: { id: user_id, username },
          accessToken: access,
          refreshToken: refresh,
          is_staff: is_staff,
        })
      );
      setError("");
      if (is_staff) {
        navigate("/admin");
      } else {
        navigate("/");
      }
    } catch (error) {
      console.error("Login error:", error);
      setError("Invalid credentials");
    }
  };

  return (
    <Box
      sx={{
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        height: "100vh",
        backgroundColor: "#f5f5f5",
      }}
    >
      <Paper
        elevation={10}
        sx={{
          padding: 4,
          width: 400,
          textAlign: "center",
          borderRadius: 3,
          boxShadow: "0px 4px 20px rgba(0, 0, 0, 0.2)",
        }}
      >
        <Typography variant="h4" component="h1" gutterBottom color="primary">
          Login
        </Typography>
        <Box component="form" onSubmit={handleLogin}>
          <TextField
            margin="normal"
            required
            fullWidth
            id="username"
            label="Username"
            name="username"
            autoComplete="username"
            autoFocus
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            InputProps={{
              endAdornment: (
                <InputAdornment position="end">
                  <FaUser style={{ color: "gray" }} />
                </InputAdornment>
              ),
            }}
          />
          <TextField
            margin="normal"
            required
            fullWidth
            name="password"
            label="Password"
            type="password"
            id="password"
            autoComplete="current-password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            InputProps={{
              endAdornment: (
                <InputAdornment position="end">
                  <FaLock style={{ color: "gray" }} />
                </InputAdornment>
              ),
            }}
          />
          {error && (
            <Typography color="error" variant="body2" sx={{ mt: 1 }}>
              {error}
            </Typography>
          )}
          <Button
            type="submit"
            fullWidth
            variant="contained"
            color="primary"
            sx={{ mt: 3, mb: 2 }}
          >
            Login
          </Button>
        </Box>
      </Paper>
    </Box>
  );
};

export default Login;


import React from "react";
import { useDispatch } from "react-redux";
import { logout } from "../../Redux/authSlice";
import { Button } from "@mui/material";
import { useNavigate } from "react-router";
import { useTheme, lightTheme, darkTheme } from "../../contexts/Theme";
const Navbar = () => {
  const { theme, toggleTheme } = useTheme();
  const currentTheme = theme === "light" ? lightTheme : darkTheme;

  const dispatch = useDispatch();
  const navigate = useNavigate();

  const handleLogout = () => {
    dispatch(logout());
    navigate("/login");
  };

  return (
    <nav>
      <Button onClick={handleLogout} variant="contained" color="secondary">
        Logout
      </Button>
      <Button onClick={toggleTheme} variant="contained" color="secondary">
        Switch to {theme === "light" ? "Dark" : "Light"} Theme
      </Button>
    </nav>
  );
};

export default Navbar;


-Add new employee with details

9 -Add department

10 View the list of all employees

11 -Update Employee details

12 -Delete Employee records

13 -Responsive Design

14 Authentication for secure access of Employee and Manager

15 Employee can request for leave

16 -Managercan review and approve leaves

17

Employee has option to view their details

18 Charts to Analyze attendance records

19

20 asTech Stack

21

22 **Frontend**: React.js, Haterial-UI

23 **Backend**: Django REST FRAMEWORK (DRF)

24

25

**Other Tools**: Redux for state management, Axios for API calls

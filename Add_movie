import axios from 'axios';

// Replace 'YOUR_OMDB_API_KEY' with your actual OMDb API key
const API_KEY = 'YOUR_OMDB_API_KEY'; 
const BASE_URL = 'https://www.omdbapi.com/';

// Fetch movies by search query and page
export const fetchMovies = async (query, page = 1) => {
  try {
    const response = await axios.get(`${BASE_URL}?s=${query}&page=${page}&apikey=${API_KEY}`);
    console.log('Movies fetched:', response.data); // Logs data to console
    return response.data; // Return the API response data
  } catch (error) {
    console.error('Error fetching movies:', error); // Logs errors
    throw error; // Propagates the error
  }
};

// Fetch detailed information about a movie by ID
export const fetchMovieDetails = async (id) => {
  try {
    const response = await axios.get(`${BASE_URL}?i=${id}&apikey=${API_KEY}`);
    console.log('Movie details:', response.data); // Logs data to console
    return response.data; // Return the API response data
  } catch (error) {
    console.error('Error fetching movie details:', error); // Logs errors
    throw error; // Propagates the error
  }
};

import axios from 'axios';

const API_KEY = '44df212';
const BASE_URL = 'https://www.omdbapi.com/';

// Function to fetch movies with IMDb ratings
export const fetchMovies = async (query, page = 1, genre = '') => {
  let url = `${BASE_URL}?s=${query}&page=${page}&apikey=${API_KEY}`;
  
  // Apply genre filter if provided
  if (genre && genre !== 'All') {
    url += `&genre=${genre}`;
  }

  // Fetch the initial search results
  const response = await axios.get(url);
  const data = response.data;

  // If no movies are found, return the response immediately
  if (!data.Search) {
    return data;
  }

  // Fetch full details for each movie to get IMDb ratings
  const moviesWithRatings = await Promise.all(
    data.Search.map(async (movie) => {
      const detailsResponse = await axios.get(`${BASE_URL}?i=${movie.imdbID}&apikey=${API_KEY}`);
      const detailsData = detailsResponse.data;
      // Add IMDb rating to the movie object
      return { ...movie, imdbRating: detailsData.imdbRating || '0.0' };
    })
  );

  // Return updated data with ratings
  return { ...data, Search: moviesWithRatings };
};

// Function to fetch detailed information about a specific movie
export const fetchMovieDetails = async (id) => {
  const response = await axios.get(`${BASE_URL}?i=${id}&apikey=${API_KEY}`);
  return response.data;
};

import React, { useState, useEffect } from 'react';
import { ThemeContext } from './ThemeContext';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { ThemeProvider } from 'styled-components';
import GlobalStyles from './GlobalStyles';
import MovieList from './MovieList'; // Movie list component
import MovieDetails from './MovieDetails'; // Movie details component
import { ThemeProviderComponent, useTheme } from './ThemeContext';
import NavigationBar from './NavigationBar';

// Create Query Client
const queryClient = new QueryClient();
const lightTheme={
  //primary:"007bff",
  primary:"#283747",
  cardBg:"#fff",
  text:'#333',
  inputBorder:"#ccc",
  
  primaryHover:"0056b3",
  background:"#f4f4f4",
  navBg:"#283747 ",
  navText:"white",
  bodyBg:"#ffffff",
  linkTextDecoration: 'none',
}

const darkTheme = {
  primary: '#1d1d1d',
  cardBg: '#333',
  text: '#fff',
  inputBorder: '#555',
  primaryHover: '#555',
  background: '#121212',
  navBg: '#1a1a1a',
  navText: '#fff',
  bodyBg:'#71797E'
};

function App() {
  const [theme, setTheme] = useState('light'); // State for theme

const toggleTheme = () => {
  setTheme((prev) => (prev === 'light' ? 'dark' : 'light'));
};

useEffect(() => {
  const body = document.body;
  const currentTheme = theme === 'light' ? lightTheme : darkTheme;
  body.style.backgroundColor = currentTheme.bodyBg;
}, [theme]); // Dependency on theme to reapply whenever it changes

return (
  <QueryClientProvider client={queryClient}>
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      <ThemeProvider theme={theme === 'light' ? lightTheme : darkTheme}>
        <Router>
          <NavigationBar />
          <Routes>
            <Route path="/" element={<MovieList />} />
            <Route path="/movie/:id" element={<MovieDetails />} />
          </Routes>
        </Router>
      </ThemeProvider>
    </ThemeContext.Provider>
  </QueryClientProvider>
);
}

import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  query: '',  // Search query
  page: 1,    // Current page for pagination
};

const movieSlice = createSlice({
  name: 'movies',
  initialState,
  reducers: {
    setQuery: (state, action) => {
      state.query = action.payload;
    },
    setPage: (state, action) => {
      state.page = action.payload;
    },
  },
});

export const { setQuery, setPage } = movieSlice.actions;

export default movieSlice.reducer;

import { configureStore } from '@reduxjs/toolkit';
import movieSlice from './movieSlice';

export const store = configureStore({
  reducer: {
    movies: movieSlice,
  },
});

export default store;



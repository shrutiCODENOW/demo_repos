import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { setQuery, setPage } from '../store/movieSlice';
import { useQuery } from '@tanstack/react-query';
import { fetchMovies, fetchMovieDetails } from '../api/movieApi';
import { Link } from 'react-router-dom';
import Pagination from './Pagination';
import SearchBar from './SearchBar';
import Filter from './Filter'; // Import the Filter Component
import SortComponent from './SortComponent'; 
import styled from 'styled-components';

// Styled Components
const Container = styled.div`
  padding: 20px;
`;

const MovieGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 15px;
`;

const MovieCard = styled.div`
  background: ${(props) => props.theme.cardBg};
  color: ${(props) => props.theme.text};
  padding: 10px;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  text-align: center;

  img {
    width: 100%;
    height: 300px;
    object-fit: cover;
    border-radius: 5px;
  }
`;

const MovieList = () => {
  const dispatch = useDispatch();
  const query = useSelector((state) => state.movies.query);
  const page = useSelector((state) => state.movies.page);

  const [searchQuery, setSearchQuery] = useState('');
  const [sortCriteria, setSortCriteria] = useState('rating');
  const [selectedGenre, setSelectedGenre] = useState('All'); // Genre state

  useEffect(() => {
    if (!query) {
      dispatch(setQuery('random'));
    }
  }, [dispatch, query]);

  // Fetch movies
  const { data, isLoading, error } = useQuery({
    queryKey: ['movies', query, page],
    queryFn: () => fetchMovies(query, page),
    enabled: !!query,
    keepPreviousData: true,
  });

  const fetchGenresForMovies = async (movies) => {
    const movieDetails = await Promise.all(
      movies.map(async (movie) => {
        const details = await fetchMovieDetails(movie.imdbID); // Fetch details by ID
        return { ...movie, Genre: details.Genre, imdbRating: details.imdbRating }; // Append Genre and IMDb Rating
      })
    );
    return movieDetails;
  };

  const [filteredMovies, setFilteredMovies] = useState([]);

  useEffect(() => {
    if (data?.Search) {
      fetchGenresForMovies(data.Search).then((moviesWithDetails) => {
        // Filter by genre
        const filtered = moviesWithDetails.filter((movie) => {
          if (selectedGenre === 'All') return true;
          return movie.Genre.includes(selectedGenre);
        });

        // Sort by criteria
        filtered.sort((a, b) => {
          if (sortCriteria === 'rating') {
            return parseFloat(b.imdbRating || 0) - parseFloat(a.imdbRating || 0); // Sort by rating
          } else if (sortCriteria === 'year') {
            return parseInt(b.Year) - parseInt(a.Year); // Sort by year
          } else if (sortCriteria === 'alphabetical') {
            return a.Title.localeCompare(b.Title); // Sort alphabetically
          }
          return 0;
        });

        setFilteredMovies(filtered);
      });
    }
  }, [data, selectedGenre, sortCriteria]);

  const handleSearch = () => {
    dispatch(setQuery(searchQuery || 'random'));
  };

  const handleSortChange = (criteria) => {
    setSortCriteria(criteria);
  };

  const handleGenreChange = (genre) => {
    setSelectedGenre(genre); // Update selected genre
  };

  if (isLoading) return <div>Loading...</div>;
  if (error) return <div>Error fetching movies!</div>;
  if (!filteredMovies.length) return <div>No movies found.</div>;

  return (
    <Container>
      {/* Search Bar */}
      <SearchBar
        searchQuery={searchQuery}
        setSearchQuery={setSearchQuery}
        onSearch={handleSearch}
      />

      {/* Filter by Genre */}
      <Filter selectedGenre={selectedGenre} onGenreChange={handleGenreChange} />

      {/* Sorting */}
      <SortComponent onSortChange={handleSortChange} />

      {/* Movie Grid */}
      <MovieGrid>
        {filteredMovies.map((movie) => (
          <Link to={`/movie/${movie.imdbID}`} key={movie.imdbID}>
            <MovieCard>
              <img src={movie.Poster} alt={movie.Title} />
              <h3>{movie.Title}</h3>
              <p>{movie.Year}</p>
              <p>IMDb Rating: {movie.imdbRating || 'N/A'}</p>
              <p>Genre: {movie.Genre}</p>
            </MovieCard>
          </Link>
        ))}
      </MovieGrid>

      {/* Pagination */}
      <Pagination
        currentPage={page}
        totalPages={Math.ceil(data.totalResults / 10)}
        onPageChange={(newPage) => dispatch(setPage(newPage))}
      />
    </Container>
  );
};

export default MovieList;

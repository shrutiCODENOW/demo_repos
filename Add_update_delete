from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from rest_framework import status
from rest_framework.permissions import IsAuthenticated
from .models import Product, Category
from .serializers import ProductSerializer, CategorySerializer

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def add_product(request):
    """
    Add a new product. If the category does not exist, it will be created.
    """
    category_name = request.data.get('category_name')
    if not category_name:
        return Response({"error": "Category name is required."}, status=status.HTTP_400_BAD_REQUEST)

    # Check if category exists; if not, create it
    category, created = Category.objects.get_or_create(name=category_name)

    product_data = {
        'name': request.data.get('name'),
        'category': category.id,
        'description': request.data.get('description'),
        'price': request.data.get('price'),
        'stock_quantity': request.data.get('stock_quantity')
    }

    serializer = ProductSerializer(data=product_data)
    if serializer.is_valid():
        serializer.save()
        return Response(serializer.data, status=status.HTTP_201_CREATED)
    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


@api_view(['PATCH'])
@permission_classes([IsAuthenticated])
def update_product(request, product_id):
    """
    Partially update an existing product. If the category does not exist, it will be created.
    """
    try:
        product = Product.objects.get(id=product_id)
    except Product.DoesNotExist:
        return Response({"error": "Product not found."}, status=status.HTTP_404_NOT_FOUND)

    category_name = request.data.get('category_name')
    if category_name:
        category, created = Category.objects.get_or_create(name=category_name)
        request.data['category'] = category.id

    serializer = ProductSerializer(product, data=request.data, partial=True)
    if serializer.is_valid():
        serializer.save()
        return Response(serializer.data, status=status.HTTP_200_OK)
    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


@api_view(['DELETE'])
@permission_classes([IsAuthenticated])
def delete_product(request, product_id):
    """
    Delete a product by its ID.
    """
    try:
        product = Product.objects.get(id=product_id)
    except Product.DoesNotExist:
        return Response({"error": "Product not found."}, status=status.HTTP_404_NOT_FOUND)

    product.delete()
    return Response({"message": "Product deleted successfully."}, status=status.HTTP_200_OK)

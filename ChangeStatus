import React, { useState, useEffect } from 'react';
import axios from 'axios';

const TaskList = () => {
  const [tasks, setTasks] = useState([]);

  useEffect(() => {
    const username = localStorage.getItem('username');
    const password = localStorage.getItem('password');

    if (!username || !password) {
      window.location.href = '/';  // Redirect to login page if no credentials
      return;
    }

    axios
      .get('http://127.0.0.1:8000/api/tasks/', {
        auth: {
          username: username,
          password: password,
        },
      })
      .then((response) => {
        setTasks(response.data);
      })
      .catch((error) => {
        console.error('Error fetching tasks:', error);
      });
  }, []);

  // Function to handle task status update
  const handleStatusChange = (taskId, newStatus) => {
    const username = localStorage.getItem('username');
    const password = localStorage.getItem('password');

    if (!username || !password) {
      window.location.href = '/';  // Redirect to login page if no credentials
      return;
    }

    // Send PUT request to update the status of the task
    axios
      .put(
        `http://127.0.0.1:8000/api/tasks/${taskId}/`, 
        { status: newStatus },
        {
          auth: {
            username: username,
            password: password,
          },
        }
      )
      .then((response) => {
        // Update task status locally after successful update
        const updatedTasks = tasks.map((task) =>
          task.id === taskId ? { ...task, status: newStatus } : task
        );
        setTasks(updatedTasks);  // Update the UI with the new status
      })
      .catch((error) => {
        console.error('Error updating task status:', error);
      });
  };

  return (
    <div style={{ padding: '20px' }}>
      <h1>Task List</h1>
      <ul>
        {tasks.length > 0 ? (
          tasks.map((task) => (
            <li key={task.id}>
              <strong>{task.title}</strong><br />
              <span>{task.description}</span><br />
              <span>Status: {task.status}</span><br />
              <span>Assigned to: {task.assigned_to.username}</span><br />
              
              {/* Status Change Button */}
              <select
                value={task.status}
                onChange={(e) => handleStatusChange(task.id, e.target.value)}
              >
                <option value="open">Open</option>
                <option value="in_progress">In Progress</option>
                <option value="closed">Closed</option>
              </select>
            </li>
          ))
        ) : (
          <p>No tasks available</p>
        )}
      </ul>
    </div>
  );
};

export default TaskList;

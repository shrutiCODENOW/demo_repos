import React, { useEffect, useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { setQuery, setPage } from '../store/movieSlice';
import { useQuery } from '@tanstack/react-query';
import { fetchMovies } from '../api/movieApi';
import { Link } from 'react-router-dom';
import Pagination from './Pagination';
import SearchBar from './SearchBar';
import Sort from './Sort';
import Filter from './Filter';
import styled from 'styled-components';

// Styled Components
const Container = styled.div`
  padding: 20px;
`;

const Toolbar = styled.div`
  display: flex;
  align-items: center;
  gap: 10px;
  margin-bottom: 20px;
`;

const MovieGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 15px;
`;

const MovieCard = styled.div`
  background: ${(props) => props.theme.cardBg};
  color: ${(props) => props.theme.text};
  padding: 10px;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  text-align: center;

  img {
    width: 100%;
    height: 300px;
    object-fit: cover;
    border-radius: 5px;
  }
`;

const MovieList = () => {
  const dispatch = useDispatch();
  const query = useSelector((state) => state.movies.query);
  const page = useSelector((state) => state.movies.page);

  const [sortOrder, setSortOrder] = useState('asc'); // Default sort order
  const [filterGenre, setFilterGenre] = useState(''); // Default filter genre

  // Random keywords if no search query
  const randomKeywords = ['action', 'love', 'war', 'comedy', 'drama', 'horror'];

  useEffect(() => {
    if (!query) {
      const randomQuery = randomKeywords[Math.floor(Math.random() * randomKeywords.length)];
      dispatch(setQuery(randomQuery));
    }
  }, [dispatch, query, randomKeywords]);

  // Fetch movies using react-query
  const { data, isLoading, error } = useQuery({
    queryKey: ['movies', query, page],
    queryFn: () => fetchMovies(query, page),
    enabled: !!query,
    keepPreviousData: true,
  });

  // Handle page change for pagination
  const handlePageChange = (newPage) => {
    dispatch(setPage(newPage));
  };

  // Sorting Logic
  const sortMovies = (movies) => {
    return [...movies].sort((a, b) =>
      sortOrder === 'asc' ? a.Title.localeCompare(b.Title) : b.Title.localeCompare(a.Title)
    );
  };

  // Filtering Logic
  const filterMovies = (movies) => {
    if (filterGenre && filterGenre !== 'All') {
      // Filtering based on genre (mock data assumption for genre)
      return movies.filter((movie) =>
        movie.Title.toLowerCase().includes(filterGenre.toLowerCase())
      );
    }
    return movies;
  };

  // Handle loading and errors
  if (isLoading) return <div>Loading...</div>;
  if (error) return <div>Error fetching movies!</div>;
  if (!data?.Search) return <div>No results found.</div>;

  // Apply sorting and filtering
  const processedMovies = sortMovies(filterMovies([...data.Search]));

  return (
    <Container>
      {/* Toolbar with Search, Sort, and Filter */}
      <Toolbar>
        <SearchBar onSearch={(term) => dispatch(setQuery(term))} />
        <Sort onSort={(order) => setSortOrder(order)} />
        <Filter onFilter={(genre) => setFilterGenre(genre)} />
      </Toolbar>

      {/* Movie Grid */}
      <MovieGrid>
        {processedMovies.map((movie) => (
          <Link to={`/movie/${movie.imdbID}`} key={movie.imdbID}>
            <MovieCard>
              <img src={movie.Poster} alt={movie.Title} />
              <h3>{movie.Title}</h3>
              <p>{movie.Year}</p>
            </MovieCard>
          </Link>
        ))}
      </MovieGrid>

      {/* Pagination */}
      <Pagination
        currentPage={page}
        totalPages={Math.ceil(data.totalResults / 10)}
        onPageChange={handlePageChange}
      />
    </Container>
  );
};

export default MovieList;

